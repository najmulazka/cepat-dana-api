// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               Int                @id @default(autoincrement())
  fullName         String
  email            String             @unique
  password         String?
  noTelp           String
  limitLoan        Int                @default(800000)
  isActivated      Boolean            @default(false)
  isAdmin          Boolean            @default(false)
  googleId         String?
  ActivationCodes  ActivationCodes?
  ResetCodes       ResetCodes?
  Notifications    Notifications[]
  banks            Banks?
  identityCards    IdentityCards?
  currentLocations CurrentLocations?
  emergecyContacts EmergecyContacts[]
  Incomes          Incomes[]
  LoanApplications LoanApplications[]
  LoanPayments     LoanPayments[]
}

model ActivationCodes {
  id             Int      @id @default(autoincrement())
  activationCode String
  createdAt      DateTime @default(now())
  isUse          Boolean  @default(false)
  userId         Int      @unique
  users          Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ResetCodes {
  id        Int      @id @default(autoincrement())
  resetCode String
  createdAt DateTime @default(now())
  isUse     Boolean  @default(false)
  userId    Int      @unique
  users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Notifications {
  id      Int    @id @default(autoincrement())
  title   String
  header  String
  message String
  userId  Int
  users   Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Banks {
  id         Int    @id @default(autoincrement())
  typeBank   String
  cardNumber String
  cardName   String
  userId     Int    @unique
  users      Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model IdentityCards {
  id                  Int      @id @default(autoincrement())
  selfiePhoto         String
  selfiePhotoId       String
  identityCardImage   String
  identityCardImageId String
  identityCardNumber  String
  placeBirth          String
  dateBirth           DateTime
  gender              String
  village             String
  subdistrict         String
  country             String
  address             String
  religion            String
  marialStatus        String
  jobs                String
  isVerified          String   @default("Waiting for approval")
  userId              Int      @unique
  users               Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model CurrentLocations {
  id          Int    @id @default(autoincrement())
  village     String
  subdistrict String
  country     String
  address     String
  userId      Int    @unique
  users       Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model EmergecyContacts {
  id       Int    @id @default(autoincrement())
  number   String
  fullName String
  relation String
  userId   Int
  users    Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Incomes {
  id              Int    @id @default(autoincrement())
  typeIncome      String
  businessName    String
  totalIncome     Int
  businessPhoto   String
  businessPhotoId String
  userId          Int
  users           Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Tempos {
  id               Int                @id @default(autoincrement())
  timePeriod       String
  interest         Int
  LoanApplications LoanApplications[]
}

model LoanApplications {
  id         Int      @id @default(autoincrement())
  loanAmount Int
  reason     String
  tempoId    Int
  date       DateTime @default(now())
  isAccepted String   @default("Waiting for approval")
  userId     Int
  tempos     Tempos   @relation(fields: [tempoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Loans      Loans?
}

model Loans {
  id                Int              @id @default(autoincrement())
  amountReturned    Int
  loanDate          DateTime         @default(now())
  returnDate        DateTime
  isReturned        Boolean          @default(false)
  loanApplicationId Int              @unique
  loanApplications  LoanApplications @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  LoanPayments      LoanPayments?
}

model LoanPayments {
  id                 Int      @id @default(autoincrement())
  transactionPhoto   String
  transactionPhotoId String
  loanId             Int      @unique
  paymentDate        DateTime @default(now())
  isAccepted         String   @default("Waiting for approval")
  userId             Int
  loans              Loans    @relation(fields: [loanId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
